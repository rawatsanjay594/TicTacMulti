using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
using System.IO;
using UnityEngine.SceneManagement;

namespace DC.Tools.Editor
{
    public class DCTagsLayersScenesBuilder : EditorWindow
    {

        private const string FOLDER_LOCATION = "Scripts/AutoGenerated/";
        private const string TAGS_FILE_NAME = "Tags";
        private const string TAGS_ENUM_FILE_NAME = "TagsEnum";
        private const string LAYERS_FILE_NAME = "Layers";
        private const string SCENES_FILE_NAME = "Scenes";
        private const string SCRIPT_EXTENSION = ".cs";

        [MenuItem("DC Tools/Rebuild Tags, Layers, Scenes Constants/Rebuild All", priority = 15)]
        static void RebuildTagsLayersAndScenesClasses()
        {
            string folderPath = Application.dataPath + "/" + FOLDER_LOCATION;
            if (!Directory.Exists(folderPath))
            {
                Directory.CreateDirectory(folderPath);
            }
            File.WriteAllText(folderPath + TAGS_FILE_NAME + SCRIPT_EXTENSION, GetClassContent(TAGS_FILE_NAME, UnityEditorInternal.InternalEditorUtility.tags));
            File.WriteAllText(folderPath + TAGS_ENUM_FILE_NAME + SCRIPT_EXTENSION, GetEnumContent(TAGS_ENUM_FILE_NAME, UnityEditorInternal.InternalEditorUtility.tags));
            File.WriteAllText(folderPath + LAYERS_FILE_NAME + SCRIPT_EXTENSION, GetLayerClassContent(LAYERS_FILE_NAME, UnityEditorInternal.InternalEditorUtility.layers));
            File.WriteAllText(folderPath + SCENES_FILE_NAME + SCRIPT_EXTENSION, GetClassContent(SCENES_FILE_NAME, GetAllScenes()));
            AssetDatabase.ImportAsset("Assets/" + FOLDER_LOCATION + TAGS_FILE_NAME + SCRIPT_EXTENSION, ImportAssetOptions.ForceUpdate);
            AssetDatabase.ImportAsset("Assets/" + FOLDER_LOCATION + TAGS_ENUM_FILE_NAME + SCRIPT_EXTENSION, ImportAssetOptions.ForceUpdate);
            AssetDatabase.ImportAsset("Assets/" + FOLDER_LOCATION + LAYERS_FILE_NAME + SCRIPT_EXTENSION, ImportAssetOptions.ForceUpdate);
            AssetDatabase.ImportAsset("Assets/" + FOLDER_LOCATION + SCENES_FILE_NAME + SCRIPT_EXTENSION, ImportAssetOptions.ForceUpdate);
            Debug.Log("Rebuild All Complete");

            Selection.activeObject = AssetDatabase.LoadAssetAtPath("Assets/" + FOLDER_LOCATION + TAGS_ENUM_FILE_NAME + SCRIPT_EXTENSION, typeof(MonoScript));
        }

        [MenuItem("DC Tools/Rebuild Tags, Layers, Scenes Constants/Rebuild Tags", priority = 12)]
        static void RebuildTagsClasses()
        {
            string folderPath = Application.dataPath + "/" + FOLDER_LOCATION;
            if (!Directory.Exists(folderPath))
            {
                Directory.CreateDirectory(folderPath);
            }

            File.WriteAllText(folderPath + TAGS_FILE_NAME + SCRIPT_EXTENSION, GetClassContent(TAGS_FILE_NAME, UnityEditorInternal.InternalEditorUtility.tags));
            File.WriteAllText(folderPath + TAGS_ENUM_FILE_NAME + SCRIPT_EXTENSION, GetEnumContent(TAGS_ENUM_FILE_NAME, UnityEditorInternal.InternalEditorUtility.tags));
            AssetDatabase.ImportAsset("Assets/" + FOLDER_LOCATION + TAGS_FILE_NAME + SCRIPT_EXTENSION, ImportAssetOptions.ForceUpdate);
            AssetDatabase.ImportAsset("Assets/" + FOLDER_LOCATION + TAGS_ENUM_FILE_NAME + SCRIPT_EXTENSION, ImportAssetOptions.ForceUpdate);
            Debug.Log("Rebuild Tags classes Complete");

            Selection.activeObject = AssetDatabase.LoadAssetAtPath("Assets/" + FOLDER_LOCATION + TAGS_ENUM_FILE_NAME + SCRIPT_EXTENSION, typeof(MonoScript));
        }

        [MenuItem("DC Tools/Rebuild Tags, Layers, Scenes Constants/Rebuild Layers", priority = 13)]
        static void RebuildLayersClass()
        {
            string folderPath = Application.dataPath + "/" + FOLDER_LOCATION;
            if (!Directory.Exists(folderPath))
            {
                Directory.CreateDirectory(folderPath);
            }

            File.WriteAllText(folderPath + LAYERS_FILE_NAME + SCRIPT_EXTENSION, GetLayerClassContent(LAYERS_FILE_NAME, UnityEditorInternal.InternalEditorUtility.layers));
            AssetDatabase.ImportAsset("Assets/" + FOLDER_LOCATION + LAYERS_FILE_NAME + SCRIPT_EXTENSION, ImportAssetOptions.ForceUpdate);
            Debug.Log("Rebuild Layers class Complete");

            Selection.activeObject = AssetDatabase.LoadAssetAtPath("Assets/" + FOLDER_LOCATION + LAYERS_FILE_NAME + SCRIPT_EXTENSION, typeof(MonoScript));
        }

        [MenuItem("DC Tools/Rebuild Tags, Layers, Scenes Constants/Rebuild Scenes", priority = 14)]
        static void RebuildScenesClass()
        {
            string folderPath = Application.dataPath + "/" + FOLDER_LOCATION;
            if (!Directory.Exists(folderPath))
            {
                Directory.CreateDirectory(folderPath);
            }

            File.WriteAllText(folderPath + SCENES_FILE_NAME + SCRIPT_EXTENSION, GetClassContent(SCENES_FILE_NAME, GetAllScenes()));
            AssetDatabase.ImportAsset("Assets/" + FOLDER_LOCATION + SCENES_FILE_NAME + SCRIPT_EXTENSION, ImportAssetOptions.ForceUpdate);
            Debug.Log("Rebuild Scenes class Complete");

            Selection.activeObject = AssetDatabase.LoadAssetAtPath("Assets/" + FOLDER_LOCATION + SCENES_FILE_NAME + SCRIPT_EXTENSION, typeof(MonoScript));
        }

        private static string[] GetAllScenes()
        {
            string[] sceneGUIDs = AssetDatabase.FindAssets("t:Scene");
            string[] sceneNames = new string[sceneGUIDs.Length];

            for (int i = 0; i < sceneGUIDs.Length; i++)
            {
                sceneNames[i] = Path.GetFileNameWithoutExtension(AssetDatabase.GUIDToAssetPath(sceneGUIDs[i]));
            }

            return sceneNames;
        }

        private static string[] EditorBuildSettingsScenesToNameStrings(EditorBuildSettingsScene[] scenes)
        {
            string[] sceneNames = new string[scenes.Length];
            for (int n = 0; n < sceneNames.Length; n++)
            {
                sceneNames[n] = System.IO.Path.GetFileNameWithoutExtension(scenes[n].path);
            }
            return sceneNames;
        }

        private static string GetClassContent(string className, string[] labelsArray)
        {
            string output = "";
            output += "//This class is auto-generated do not modify (TagsLayersScenesBuilder.cs) - blog.almostlogical.com\n";
            output += "public class " + className + "\n";
            output += "{\n";
            foreach (string label in labelsArray)
            {
                output += "\t" + BuildConstVariable(label) + "\n";
            }
            output += "}";
            return output;
        }

        private static string GetLayerClassContent(string className, string[] labelsArray)
        {
            string output = "";
            output += "//This class is auto-generated do not modify (TagsLayersScenesBuilder.cs) - blog.almostlogical.com\n";
            output += "public class " + className + "\n";
            output += "{\n";
            foreach (string label in labelsArray)
            {
                output += "\t" + BuildConstVariable(label) + "\n";
            }
            output += "\n";

            foreach (string label in labelsArray)
            {
                output += "\t" + "public const int " + ToUpperCaseWithUnderscores(label) + "_INT" + " = " + LayerMask.NameToLayer(label) + ";\n";
            }

            output += "}";
            return output;
        }

        private static string GetEnumContent(string className, string[] labelsArray)
        {
            string output = "";
            output += "//This class is auto-generated do not modify (TagsLayersScenesBuilder.cs) - blog.almostlogical.com\n";
            output += "public enum " + className + "\n";
            output += "{\n";
            for (int i = 0; i < labelsArray.Length; i++)
            {
                if (i < labelsArray.Length - 1)
                    output += "\t" + labelsArray[i] + ",\n";
                else
                    output += "\t" + labelsArray[i] + "\n";
            }
            output += "}";

            return output;
        }

        private static string BuildConstVariable(string varName)
        {
            return "public const string " + ToUpperCaseWithUnderscores(varName) + " = " + '"' + varName + '"' + ";";
        }

        private static string ToUpperCaseWithUnderscores(string input)
        {
            input = input.Trim();

            string output = "" + input[0];

            for (int n = 1; n < input.Length; n++)
            {
                if ((input[n] == '_' && output[output.Length - 1] != '_') || ((char.IsUpper(input[n]) || input[n] == ' ') && !char.IsUpper(input[n - 1]) && input[n - 1] != '_' && input[n - 1] != ' '))
                {
                    output += "_";
                }

                if (input[n] != ' ' && input[n] != '_' && input[n] != '-')
                {
                    output += input[n];
                }
            }

            output = output.ToUpper();
            return output;
        }
    }
}
